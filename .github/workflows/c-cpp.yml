name: C/C++ CI

on:
  push:
    branches:
        - master
  pull_request:
    branches: [ master ]

env:
  # Force timezone to central european or unit tests checking DST/standard time switches will fail (those switches do not occur at the same time in all timezones).
  TZ: CET

jobs:
  pthsem-build:
    runs-on: ubuntu-latest

    strategy:
        matrix:
            #gcc-version: [8, 9]
            gcc-version: [9]

    env:
        CC: gcc-${{ matrix.gcc-version }}
        CXX: g++-${{ matrix.gcc-version }}

    steps:
    - uses: actions/checkout@v2
      with:
          repository: linknx/pthsem
    - name: install required dependencies
      run: sudo apt install g++-${{ matrix.gcc-version }}
      
    - name: build pthsem
      # Build and deploy pthsem to 'installdir'
      run: ./configure --disable-shared --prefix=/tmp/pthseminstalldir && make install

    - uses: actions/upload-artifact@v2
      with:
          name: pthsem-gcc-${{ matrix.gcc-version }}
          path: |
            /tmp/pthseminstalldir/**

  linknx-build:
    runs-on: ubuntu-latest
    needs: pthsem-build

    strategy:
        matrix:
            #gcc-version: [8, 9]
            gcc-version: [9]
            #install-deps: ['esmtp_log4cpp_lua_mariadb_curl_jsoncpp', '', 'curl', 'jsoncpp']
            install-deps: ['libcurl4-openssl-dev libesmtp-dev liblog4cpp5-dev liblua5.1-0-dev libmariadb-dev libjsoncpp-dev']

    env:
        CC: gcc-${{ matrix.gcc-version }}
        CXX: g++-${{ matrix.gcc-version }}

    steps:
      # Retrieve pthsem artifact and install it.
    - uses: actions/download-artifact@v2
      with:
          name: pthsem-gcc-${{ matrix.gcc-version }}
          # This path must match the --with-pth option of configure
          path: /tmp/pthseminstalldir

      # Uninstall all deps first
    - name: pre-install cleanup
      run: sudo apt remove libcurl4-openssl-dev libesmtp-dev liblog4cpp5-dev liblua5.1-0-dev libmariadb-dev libjsoncpp-dev

    - uses: actions/checkout@v2
    - name: install required dependencies
      run: sudo apt install g++-${{ matrix.gcc-version }} libcppunit-dev gettext ${{ matrix.install-deps }}
      
      # Configure LinKNX.
    - name: prepare build system
      run: autoreconf --install
    - name: configure 
      run: ./configure --with-pth=/tmp/pthseminstalldir

      # Build LinKNX, test it and deploy it.
    - name: make
      run: make
    - name: make check
      run: make check
    - name: make install
      run: sudo make install
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: test-suite.log
        path: test/test-suite.log
